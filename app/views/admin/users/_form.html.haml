-if flash[:error]
  .alert-message.error= flash[:error].html_safe 
  
= form_for([:admin, @user]) do |f|
  -if @user.errors.any?
    #error_explanation
      %h2= "#{pluralize(@user.errors.count, "error")} prohibited this user from being saved:"
      %ul
        - @user.errors.full_messages.each do |msg|
          %li= msg
  %fieldset
    %legend= title
    .clearfix
      = f.label :email
      .required *
      .input
        = f.text_field :email, :disabled => @user.email.empty? ? false : true, :class => ""
    .clearfix
      = f.label :display_name
      .input
        = f.text_field :display_name, :maxlength => "30" 
    - if @user.email.empty? and $authenticate_method == :database_authenticatable
      .clearfix
        %type{:type => "hidden"}
        = f.label :password
        .required *
        .input
          = f.password_field :password, :autocomplete => "off", :class => "validate[required, funcCall[checkOnlySpace], funcCall[checkPassword]]"
      .clearfix
        = f.label :confirm_password
        .required *
        .input
          %input{:id => "confirm_password", :type => "password", :class => "validate[required, funcCall[checkOnlySpace], funcCall[checkPassword], equals[user_password]]"}

    .clearfix
      - val_uad = ""
      - if not(@user.ability_definitions.nil?) and not(@user.ability_definitions.empty?)
        - @user.ability_definitions.each do |uad|
          - val_uad += "||Can #{uad.ability_definition.ability} #{uad.ability_definition.resource} for #{uad.project.nil? ? "All" : "#{uad.project.name}"}"
      = f.text_area :ability_definitions, {:value => val_uad}
      - val_upr = ""
      - if not(@user.projects_roles.nil?) and not (@user.projects_roles.empty?)
        - @user.projects_roles.each do |upr|
          - val_upr += "||#{upr.role_id},#{upr.project_id.nil? ? 0 : upr.project_id}"
      = f.text_area :projects_roles, {:value => val_upr}
    .clearfix
      %label Select roles
      .input
        = select_tag "upr roles", options_from_collection_for_select(Role.all, :id, :name), :id => "upr_role", :class => "roles chzn-select left"
        = select_tag "upr projects", options_from_collection_for_select(Project.all, :id, :name), :id => "upr_project", :class => "roles chzn-select left", :prompt => "All"
        %span#add_upr_btn{:class => 'btn user-projects-roles left'} Add
        %table.project_role
          %tr
            %th Roles In Projects
            %th
            %th
          %tr#hidden_upr
            %td
              To be cloned
            %td 
              To be cloned
            %td#hidden
              To be cloned
            %td
              %img{:class => "delete_upr", :src => asset_path("cross-hover.png")}
          - if @user.projects_roles.nil? or @user.projects_roles.empty?
            %tr.no-tata
              %td{:colspan => 3}
                %h4 No Role Defined
          - else
            - @user.projects_roles.each do |pr|
              %tr.data-list
                %td= pr.role.name
                %td= pr.project ? pr.project.name : "All"
                %td#hidden= "||#{pr.role.id},#{pr.project ? pr.project.id : 0}"
                %td
                  %img{:class => "delete_upr", :src => asset_path("cross-hover.png")}        
    .clearfix
      %label User ability definitions
      .input
        = select_tag "uad abilities", options_for_select({"Manage" => "manage", "Create" => "create", "Update" => "update"}), :include_blank => true, :id => "uad_ability", :class => "ability chzn-select"
        = select_tag "uad resources", options_for_select({"TestRound" => "TestRound", "TestPlan" => "TestPlan", "TestSuite" => "TestSuite", "AutomationScript" => "AutomationScript", "AutomationCase" => "AutomationCase", "TestCase" => "TestCase", "AutomationScriptResult" => "AutomationScriptResult", "AutomationCaseResult" => "AutomationCaseResult", "AutomationDriverConfig" => "AutomationDriverConfig", "Project" => "Project"}), :include_blank => true, :id => "uad_resource", :class => "user-ability-definitions chzn-select"
        = select_tag "uad projects", options_from_collection_for_select(Project.all, :id, :name), :id => "uad_project", :class => "ability chzn-select", :prompt => "All"
        %span#add_uad_btn{:class => 'btn user-ability-definitions'} Add
        %table.abilities
          %tr
            %th Ability
            %th
          %tr#hidden_uad
            %td
              To be cloned
            %td
              %img{:class => "delete_uad", :src => asset_path("cross-hover.png")}
          - if @user.ability_definitions.nil? or @user.ability_definitions.empty?
            %tr.no-tata
              %td{:colspan => 2}
                %h4 No data
          - else
            - @user.ability_definitions.each do |uad|
              %tr.data-list
                %td= "Can #{uad.ability_definition.ability} #{uad.ability_definition.resource} for #{uad.project.nil? ? "All" : "#{uad.project.name}"}"
                %td
                  %img{:class => "delete_uad", :src => asset_path("cross-hover.png")}
    .actions
      = f.submit 'Save', :class => 'btn primary', :id => 'save'
      = link_to 'Cancel', admin_users_path, :class => 'btn'

:javascript
  $(function(){
    $("#new_user").validationEngine({promptPosition : "bottomRight", scroll: false});
    $(".edit_user").validationEngine({promptPosition : "bottomRight", scroll: false});
    $('#add_uad_btn').click(function(){
      var ability = $('#uad_ability option:selected').val();
      var resource = $('#uad_resource option:selected').text();
      var project = $('#uad_project option:selected').text();
      var text = "Can " + ability + " " + resource + " for " + project;
      var uads_current_value = $("#user_ability_definitions").val();
      if ($.trim(ability) == "" || $.trim(resource) == ""){
        alert("Please select an ability and an object!");
      }
      else if (uads_current_value.match(text)!=null) {
        alert("User ability definitions already exists!");
      }
      else {
        if ($("table.abilities tbody tr.no-tata").length>0) {
          $("table.abilities tbody tr.no-tata").remove();
        }
        var ele = $("#hidden_uad").clone();
        ele.children("td").first().html(text);
        ele.appendTo("table.abilities tbody").show("slow");
        $("#user_ability_definitions").val(uads_current_value + "||" + text);
        ele.children("td").last().children(".delete_uad").bind('click', function(){
          $(this).parent().parent().fadeOut("slow");
          var delete_uad = "||" + $(this).parent().prev().text();
          var new_uads_value = $("#user_ability_definitions").val().replace(delete_uad,"");
          $("#user_ability_definitions").val(new_uads_value);
        });
      }
    });
    $('.delete_uad').click(function(){
      $(this).parent().parent().fadeOut("slow");
      var delete_uad = "||" + $(this).parent().prev().text();
      var new_uads_value = $("#user_ability_definitions").val().replace(delete_uad,"");
      $("#user_ability_definitions").val(new_uads_value);
    });
    $('#upr_role').change(function(){
      var role = $('#upr_role option:selected').text();
      if (role == "admin") {
        $('#upr_project').children().first().attr("selected",true);
        $('#upr_project').trigger("liszt:updated");
        $('#upr_project_chzn .chzn-drop').toggle(false);
        $('#upr_project_chzn a div').toggle(false);
      } else {
        $('#upr_project_chzn .chzn-drop').toggle(true);
        $('#upr_project_chzn a div').toggle(true);       
      }
    });
    $('#add_upr_btn').click(function(){
      var role = $('#upr_role option:selected').text();
      var role_id = $('#upr_role option:selected').val();
      var project = $('#upr_project option:selected').text();
      var project_id = $('#upr_project option:selected').val();
      if (project_id == "") {
        project_id = "0"
      }
      var regex = "," + project_id + "$|," + project_id + "\\|";
      var inserted_upr = "||" + role_id + "," + project_id;
      var upr_current_value = $("#user_projects_roles").val();
      if (upr_current_value.match(regex) != null) {
        alert("User already has a role for the project!");
      } else {
        if ($("table.project_role tbody tr.no-tata").length>0) {
          $("table.project_role tbody tr.no-tata").remove();
        }
        var ele = $("#hidden_upr").clone();
        var first = ele.children("td").first();
        first.html(role);
        first.next().html(project);
        first.next().next().html(inserted_upr);
        ele.appendTo("table.project_role tbody").show("slow");
        $("#user_projects_roles").val(upr_current_value + inserted_upr);
        ele.children("td").last().children(".delete_upr").bind('click', function(){
          $(this).parent().parent().fadeOut("slow");
          var delete_upr = $(this).parent().prev().text();
          var new_upr_value = $("#user_projects_roles").val().replace(delete_upr,"");
          $("#user_projects_roles").val(new_upr_value);
        });
      }
    });
    $('.delete_upr').click(function(){
      $(this).parent().parent().fadeOut("slow");
      var delete_upr = $(this).parent().prev().text();
      var new_upr_value = $("#user_projects_roles").val().replace(delete_upr,"");
      $("#user_projects_roles").val(new_upr_value);
    });    
    $('#add-button').click(function(){
      $('#tcpp-ids').empty();
      $('#tcpps :selected').each(function(idx, elem){
        $('#tcpps-selected').append($(elem));
      });
      $('#tcpps-selected').children().each(function(idx, elem){
        $('#tcpp-ids').append($('#user_oracle_project_ids_').clone().val($(elem).attr('value')));
      });
    });
    $('#remove-button').click(function(){
      $('#tcpp-ids').empty();
      $('#tcpps-selected :selected').each(function(idx, elem){
        $('#tcpps').append($(elem));
      });
      $('#tcpps-selected').children().each(function(idx, elem){
        $('#tcpp-ids').append($('#user_oracle_project_ids_').clone().val($(elem).attr('value')));
      });
    });
    $('#add-all-button').click(function(){
      $('#tcpp-ids').empty();
      $('#tcpps option').each(function(idx, elem){
        $('#tcpps-selected').append($(elem));
        $('#tcpp-ids').append($('#user_oracle_project_ids_').clone().val($(elem).attr('value')));
      });
    });
    $('#clear-all-button').click(function(){
      $('#tcpp-ids').empty();
      $('#tcpps-selected option').each(function(idx, elem){
        $('#tcpps').append($(elem));
      });
    });
    $('#save').click(function() {
      if($("#user_email").val()) {
        $('#user_email').addClass('validate[custom[email]]');
      } else {
        $('#user_email').addClass('validate[required]');
      }
    });
  });
  function checkPassword(field, rules, i, options){
    var patrn = /\s/i;
    if (patrn.test(field.val())) {
        return "* Invalid character";
    }
  }